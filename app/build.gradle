apply plugin: 'com.android.application'

def platformVersion = 24      // openGLES 3.2 min api level
// def platformVersion = 18    //openGLES 3 min api level
// def platformVersion = 12    //openGLES 2 min api level

android {
    compileSdkVersion 31
    ndkVersion '22.1.7171670'

    defaultConfig {
        applicationId 'com.vr.maze'
        minSdkVersion "${platformVersion}"
        targetSdkVersion 31
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                          'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            version '3.18.1'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    // Android Mobile Vision
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.google.protobuf:protobuf-javalite:3.10.0'
    implementation project(path: ':sdk')
}

// The dependencies for NDK builds live inside the .aar files so they need to
// be extracted before NDK targets can link against.
task extractNdk(type: Copy)  {
    if (file("${project.rootDir}/sdk/build/outputs/aar/sdk-release.aar").exists()) {
        copy {
            from zipTree("${project.rootDir}/sdk/build/outputs/aar/sdk-release.aar")
            into "src/main/cpp/libraries/"
            include "jni/**/libcardboard_api.so"
        }
        copy {
            from "${project.rootDir}/sdk/include/cardboard.h"
            into "src/main/cpp/libraries/"
        }
    }
}

task deleteNdk(type: Delete) {
    delete "src/main/cpp/libraries/jni"
    delete "src/main/cpp/libraries/cardboard.h"
}

build.dependsOn(extractNdk)
clean.dependsOn(deleteNdk)